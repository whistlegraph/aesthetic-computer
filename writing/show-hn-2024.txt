Show HN: Aesthetic Computer - Mobile-first runtime and social network for
                              creative computing. 
        (https://aesthetic.computer)

Aesthetic Computer is a mobile-first runtime and social network for creative computing.

I started writing Aesthetic Computer in 2021 because I desired new tools to
author, publish and connect the creative software toys I had been making in my art and
education practice for 10+ years. The last of these before AC was https://nopaint.art,
discussed here on HN in 2020.[0] Read `*** Story ***` below for more background.

AC's client interface is designed to function like a musical instrument, on which
users discover their own memorizable paths in the network of commands and
published pieces. As users grow their literacy through play and exploration,
they are able to improvise, recombine, and expand their performable repertoire.

*** How To ***

Visit https://aesthetic.computer and press the top left of the screen or type any key
to activate the prompt.

Use the AC prompt by entering names of built-in toy and utility pieces like
`notepat`[1], or `boyfriend` and those published by user handles like `@bash/hub`.

Return to the prompt by pressing the name at the top
left corner, your browser's back button or the [Esc], [`], or [Backspace]
keyboard shortcuts.

Enter `list` at the prompt for a scrollable index of pieces and commands.

Most of AC is open to anonymous users. Some pieces like `chat` or
`moods` require a registered @handle to fully participate and post data.

Every piece on AC is url addressable. Users who enjoy using `notepat` can skip the
prompt entirely by bookmarking https://aesthetic.computer/notepat and QR codes
for any piece can be generated by prefixing the piece with `share` at prompt.

Here are a some recipes to try:

A. Make a Painting 

1. Enter `new 128` to start a new 128x128 pixel painting. 
2. Enter `rect red` and drag to paint red (or any CSS color) rectangles.
   (Or try other primitive brushes like `line`, `shape`, and `fill`.)
3. Press the command name in the top left corner to return to `prompt`.
   (Or use the [Esc], [Backspace], or [`] on the keyboard.)
4. Enter `smear` and drag to use a pixel scattering brush, then return to
   `prompt`.
5. Enter `dl` to download a timestamped PNG or `done` to publish the painting on
   AC servers. (Or `print` to mail order a sticker.)

B. Play a Melody 

1. Enter `+` to open a new prompt window.
2. Enter `metronome 120` to keep rhythm at 120 BPM.
3. Enter `notepat` in the original prompt to play tones in regular time.
   (Or try `bleep:sine 4x4` for a randomized tone matrix.)
4. Record a `notepat` performance as a looping, downloadable video by entering
   `tape notepat`. (Or enter `tape` on its own to start recording at prompt.)
5. Play `notepat` in person with others by generating a QR code via
  `share notepat`.

C. Say "hi" in `chat`.

1. Enter `imnew` or press [I'm New] on the deactivated prompt to register.
2. Verify your email.
3. Set a @handle with `handle ur-handle-here`.
4. First-time handle setters are automatically routed to `chat`.

E. Write a Piece 

Each "piece" on AC is coordinated by a single `.mjs` (standard JavaScript
module) or `.lisp` (a custom dialect[2]) file.

This follows Processing's "sketchbook"[3] based development model of one source
file per explorable idea, and the Unix philosophy's pattern of offering
user-level composability across small single-purpose programs.

- Drag & Drop -
1. Enter `source` to download a bare bones `blank.mjs` piece template.  
   (Or prefix any existing piece with `source` to fork, like `source notepat`.)
2. Open the piece template in a text editor and change
   `wipe("gray")` -> `wipe("blue")`.
3. Save the file and drag it into the AC window to run it preview the change.
4. Press the piece name in the top left corner to return to `prompt`.
5. Enter `publish`[4] to put the code online.

- VS Code -
1. Enter `edit` to install the AC VS Code extension.
2. Press the rectangular AC prompt icon in the VS Code sidebar to open the AC panel.
3. Enter `source` to open a blank JavaScript piece template in the VS Code editor.
4. Save the template to run it.
5. Press the command name in the top left corner to return to `prompt`.
6. Enter `publish`[4] to put the code online.

- Testing -
For instant multi-device testing in studios and classrooms, AC uses a simple
`channel` feature to broadcast incremental changes during piece development.

1. Enter `channel custom-name` replacing `custom-name` with something unique on
   the primary development device.  
2. Enter the same command `channel custom-name` on any additional test device.
3. Drag & Drop piece code to AC or save the file in VS Code to update all devices.

---

[0] No Paint HN discussion from 2020: https://news.ycombinator.com/item?id=23546706.
[1] Recent HN discussion on `notepat` here: https://news.ycombinator.com/item?id=41526754
[2] "Kid Lisp" source & samples: https://github.com/whistlegraph/aesthetic-computer/blob/main/system/public/aesthetic.computer/lib/kidlisp.mjs
[3] Processing Foundation homepage: https://processing.org 
[4] Published pieces by anonymous users are temporarily uploaded to a global namespace
    using a short random identifier. Registered users publish under their `@handle` where
    the filename is used for the piece name, or can be overridden with
    `publish piece-name-here`. 

*** Story ***

In 2020 during Covid I released the free No Paint software as a website
and iOS app[5].

When No Paint users began to reach out with a desire to submit custom pixel
stamps I would receive their PNGs and add their images to No Paint's Construct 3
(https://construct3.net) project build under mock social @handles to index them
as part of the `stamp` brush.

And when they expressed a desire to design and publish custom brushes, I provided
them with a minimal Construct template project that they would work in and send
back to me for integration.

No Paint had a wide variety of non-technical users who learned a lot about computing
through this process of contributing to and grokking a toy they enjoyed. But my
process for accepting contributions was manual and slow. I had to add every asset
manually to a statically built product which added hours or days to the iteration
time for users who wanted to see their work integrated into the larger whole.

One of the reasons I was driven to building No Paint in Construct 3 was its great
cross-platform (mobile) browser support and the ability to work on my project
entirely in-browser and then export to native webview based apps or a static
build I could upload to the web server. 

In JavaScript courses and workshops for art and design students I often used a
combination basic HTML and CSS with the Canvas2D API, Processing via the p5.js
web editor (https://editor.p5js.org), and Glitch (https://glitch.com) to achieve
a fast iterative loop where student work was always live so they could test on
any device in the classroom by just visiting a URL on that device.

In COVID I explored outlying technologies and for one assignment used Roblox
which offered beginner friendly 3D development and baked in multiplayer so we
could all experience the work together remotely. Even though Roblox had these
nice platform features baked in, the engine and editor was not elegant like a
basic HTML file or Processing sketch and offered too many distractions to try
again.

During this time I noticed crossover with the No Paint userbase and my art and
design students. Non-technical No Paint users from around the world were
learning more about dynamic media, entering commands, and contributing to
software they loved, and my students wanted to be able to publish their own
software experiments from class to their families and friends without friction.

I realized that if I built my own system with sane mobile-first defaults, a
"creative coder" compatible JavaScript API I could teach in, networked
multiplayer, and a social handle system for keeping track of and automatically
integrating published media and software from users, then I could squash some of
these errands of my trade in one integrated system. 

One of my favorite ideas from Processing that attracted me was the concept of
the "software sketch" and "sketchbook", which can be taken both metaphorically
as a call for creative action or mindful suggestion, and literally as single
document or file embodying and exploring a single idea or form.

This separation of concerns originates from one of the forefathers of Processing.
John Maeda, who baked his Java software sketchbook practice
(https://youtu.be/WAuDCOl9qrk?si=SyTRvNch4Z72_CU0&t=427) from the 90s into the
UX of an accessible tool for design students called Design By Numbers
(https://www.media.mit.edu/projects/design-by-numbers-again/overview), which
later evolved into the Processing desktop environment.

Back in 2009 when I was learning to program as an art student I struggled through
ActionScript 3 because I wanted my software to be available on the web. Web
browser support for Java applets were being phased out at that point due to
security concerns and libraries p5.js hadn't been written. The Canvas2D API was
a baby and WebGL didn't exist yet.

When I first discovered the Processing website with its learning resources and
downloaded the IDE I got so addicted to the feedback loop and mental model it
presented I went from one bloated ActionScript 3 project to a portfolio of
prototypes and experiments I coded and kept all in one place. The API has short
commands and a single namespace which was a breath of fresh air from the design
of the complex and nested ActionScript 3 API which made iteration faster and
interface code more clear and easier to reason about. In short, I was learning
and exploring faster, and becoming more addicted. 

Eventually in my programming journey I came across the Unix philosophy
(https://en.wikipedia.org/wiki/Unix_philosophy) of composibility and recognized
that Processing's mental model of sketchbook based development was compatible
the "one idea per program" doctrine in Unix utility design. 

Aesthetic Computer's built-in utilities follow this one idea model and can be
composed together to operate on shared data. Making graphics or playing music
on AC usually involves one or more pieces being run simultaneously or in a
sequence of prompts. 

---

[5] No Paint iOS Reviews: https://apps.apple.com/us/app/no-paint/id1107427275